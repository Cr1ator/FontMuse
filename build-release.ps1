# FontMuse Release Build Script –¥–ª—è Windows
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç portable –≤–µ—Ä—Å–∏–∏

param(
    [switch]$Clean = $false,
    [switch]$SkipDeps = $false
)

# –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
$Host.UI.RawUI.ForegroundColor = "White"

function Write-Info($Message) {
    Write-Host "[INFO] $Message" -ForegroundColor Green
}

function Write-Warn($Message) {
    Write-Host "[WARN] $Message" -ForegroundColor Yellow
}

function Write-Error($Message) {
    Write-Host "[ERROR] $Message" -ForegroundColor Red
}

function Check-Dependencies {
    Write-Info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
    try {
        $nodeVersion = node --version
        Write-Info "Node.js –Ω–∞–π–¥–µ–Ω: $nodeVersion"
    }
    catch {
        Write-Error "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pnpm
    try {
        $pnpmVersion = pnpm --version
        Write-Info "pnpm –Ω–∞–π–¥–µ–Ω: $pnpmVersion"
    }
    catch {
        Write-Error "pnpm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install -g pnpm"
        exit 1
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Rust
    try {
        $rustVersion = cargo --version
        Write-Info "Rust –Ω–∞–π–¥–µ–Ω: $rustVersion"
    }
    catch {
        Write-Error "Rust –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Tauri CLI
    try {
        $tauriVersion = tauri --version
        Write-Info "Tauri CLI –Ω–∞–π–¥–µ–Ω: $tauriVersion"
    }
    catch {
        Write-Error "Tauri CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: cargo install tauri-cli"
        exit 1
    }
    
    Write-Info "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã ‚úì"
}

function Clean-Build {
    if ($Clean) {
        Write-Info "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫..."
        
        if (Test-Path "src-tauri\target") {
            Remove-Item "src-tauri\target" -Recurse -Force
        }
        if (Test-Path "out") {
            Remove-Item "out" -Recurse -Force
        }
        if (Test-Path "dist") {
            Remove-Item "dist" -Recurse -Force
        }
        if (Test-Path "releases") {
            Remove-Item "releases" -Recurse -Force
        }
        
        Write-Info "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úì"
    }
}

function Install-Dependencies {
    if (-not $SkipDeps) {
        Write-Info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        pnpm install
        if ($LASTEXITCODE -ne 0) {
            Write-Error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
            exit 1
        }
        Write-Info "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚úì"
    }
}

function Build-Frontend {
    Write-Info "–°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
    pnpm run build
    if ($LASTEXITCODE -ne 0) {
        Write-Error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥"
        exit 1
    }
    Write-Info "–§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–æ–±—Ä–∞–Ω ‚úì"
}

function Build-Platform($Target, $DisplayName) {
    Write-Info "–°–±–æ—Ä–∫–∞ –¥–ª—è $DisplayName ($Target)..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ target
    $installedTargets = rustup target list --installed
    if ($installedTargets -notcontains $Target) {
        Write-Info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ target $Target..."
        rustup target add $Target
        if ($LASTEXITCODE -ne 0) {
            Write-Warn "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å target $Target. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º..."
            return $false
        }
    }
    
    # –°–±–æ—Ä–∫–∞
    tauri build --target $Target --config src-tauri/tauri.portable.conf.json
    if ($LASTEXITCODE -eq 0) {
        Write-Info "–°–±–æ—Ä–∫–∞ –¥–ª—è $DisplayName –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úì"
        return $true
    }
    else {
        Write-Warn "–°–±–æ—Ä–∫–∞ –¥–ª—è $DisplayName –Ω–µ —É–¥–∞–ª–∞—Å—å"
        return $false
    }
}

function Create-Archives {
    Write-Info "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–æ–≤ –¥–ª—è —Ä–µ–ª–∏–∑–∞..."
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–ª–∏–∑–æ–≤
    if (-not (Test-Path "releases")) {
        New-Item -ItemType Directory -Path "releases"
    }
    
    # Windows
    $windowsExe = "src-tauri\target\x86_64-pc-windows-msvc\release\FontMuse.exe"
    if (Test-Path $windowsExe) {
        Write-Info "–°–æ–∑–¥–∞–Ω–∏–µ Windows portable –∞—Ä—Ö–∏–≤–∞..."
        Compress-Archive -Path $windowsExe -DestinationPath "releases\FontMuse-windows-portable.zip" -Force
        Write-Info "Windows –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω ‚úì"
    }
    
    # Linux AppImage
    $linuxPath = "src-tauri\target\x86_64-unknown-linux-gnu\release\bundle\appimage"
    if (Test-Path $linuxPath) {
        $appImageFile = Get-ChildItem -Path $linuxPath -Filter "*.AppImage" | Select-Object -First 1
        if ($appImageFile) {
            Write-Info "–°–æ–∑–¥–∞–Ω–∏–µ Linux portable –∞—Ä—Ö–∏–≤–∞..."
            Copy-Item $appImageFile.FullName "releases\FontMuse-linux-portable.AppImage"
            Write-Info "Linux –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω ‚úì"
        }
    }
    
    # macOS (–µ—Å–ª–∏ —Å–æ–±–∏—Ä–∞–ª–∏)
    $macosIntelPath = "src-tauri\target\x86_64-apple-darwin\release\bundle\macos\FontMuse.app"
    if (Test-Path $macosIntelPath) {
        Write-Info "–°–æ–∑–¥–∞–Ω–∏–µ macOS Intel –∞—Ä—Ö–∏–≤–∞..."
        # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º 7zip –∏–ª–∏ –¥—Ä—É–≥–æ–π –∞—Ä—Ö–∏–≤–∞—Ç–æ—Ä, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        try {
            tar -czf "releases\FontMuse-macos-intel-portable.tar.gz" -C "src-tauri\target\x86_64-apple-darwin\release\bundle\macos" FontMuse.app
            Write-Info "macOS Intel –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω ‚úì"
        }
        catch {
            Write-Warn "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å macOS –∞—Ä—Ö–∏–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è tar –∏–ª–∏ 7zip)"
        }
    }
}

function Show-Results {
    Write-Info "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–±–æ—Ä–∫–∏:"
    Write-Host ""
    
    if ((Test-Path "releases") -and (Get-ChildItem "releases" | Measure-Object).Count -gt 0) {
        Write-Host "–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã:" -ForegroundColor Cyan
        Get-ChildItem "releases" | Format-Table Name, Length, LastWriteTime
        
        $totalSize = (Get-ChildItem "releases" | Measure-Object -Property Length -Sum).Sum
        $totalSizeMB = [math]::Round($totalSize / 1MB, 2)
        Write-Host "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $totalSizeMB MB" -ForegroundColor Green
        Write-Host ""
        
        Write-Host "–ì–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ GitHub Releases!" -ForegroundColor Yellow
        Write-Host "–§–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ: releases\"
    }
    else {
        Write-Error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞"
        exit 1
    }
}

function Main {
    Write-Host "üöÄ FontMuse Release Build Script –¥–ª—è Windows" -ForegroundColor Cyan
    Write-Host "=============================================" -ForegroundColor Cyan
    Write-Host ""
    
    Check-Dependencies
    Clean-Build
    Install-Dependencies
    Build-Frontend
    
    Write-Info "–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É portable –≤–µ—Ä—Å–∏–π..."
    
    # –°–±–æ—Ä–∫–∞ –¥–ª—è Windows (–æ—Å–Ω–æ–≤–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞)
    $windowsSuccess = Build-Platform "x86_64-pc-windows-msvc" "Windows"
    
    # –ü–æ–ø—ã—Ç–∫–∞ —Å–±–æ—Ä–∫–∏ –¥–ª—è Linux (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å WSL)
    $linuxSuccess = Build-Platform "x86_64-unknown-linux-gnu" "Linux"
    if (-not $linuxSuccess) {
        Write-Warn "Linux —Å–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –î–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —Å–±–æ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ WSL –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ GitHub Actions"
    }
    
    # macOS —Å–±–æ—Ä–∫–∞ –Ω–∞ Windows –æ–±—ã—á–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    Write-Warn "macOS —Å–±–æ—Ä–∫–∞ –Ω–∞ Windows –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ GitHub Actions –∏–ª–∏ macOS –º–∞—à–∏–Ω—É"
    
    Create-Archives
    Show-Results
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
try {
    Main
}
catch {
    Write-Error "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: $_"
    exit 1
}