#!/bin/bash

# FontMuse Release Build Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç portable –≤–µ—Ä—Å–∏–∏ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º

set -e  # –í—ã–π—Ç–∏ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

echo "üöÄ FontMuse Release Build Script"
echo "================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v node &> /dev/null; then
        error "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v pnpm &> /dev/null; then
        error "pnpm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install -g pnpm"
        exit 1
    fi
    
    if ! command -v cargo &> /dev/null; then
        error "Rust –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v tauri &> /dev/null; then
        error "Tauri CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: cargo install tauri-cli"
        exit 1
    fi
    
    log "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã ‚úì"
}

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫
clean_build() {
    log "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫..."
    rm -rf src-tauri/target/release/
    rm -rf out/
    rm -rf dist/
    rm -rf releases/
    log "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úì"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_deps() {
    log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    pnpm install
    log "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚úì"
}

# –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
build_frontend() {
    log "–°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
    pnpm run build
    log "–§—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–æ–±—Ä–∞–Ω ‚úì"
}

# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
build_platform() {
    local platform=$1
    local target=$2
    local display_name=$3
    
    log "–°–±–æ—Ä–∫–∞ –¥–ª—è $display_name ($target)..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ target
    if ! rustup target list --installed | grep -q "$target"; then
        log "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ target $target..."
        rustup target add "$target" || {
            warn "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å target $target. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º..."
            return 1
        }
    fi
    
    # –°–±–æ—Ä–∫–∞
    if tauri build --target "$target" --config src-tauri/tauri.portable.conf.json; then
        log "–°–±–æ—Ä–∫–∞ –¥–ª—è $display_name –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚úì"
        return 0
    else
        warn "–°–±–æ—Ä–∫–∞ –¥–ª—è $display_name –Ω–µ —É–¥–∞–ª–∞—Å—å"
        return 1
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–æ–≤
create_archives() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–æ–≤ –¥–ª—è —Ä–µ–ª–∏–∑–∞..."
    
    mkdir -p releases/
    
    # Windows
    if [ -f "src-tauri/target/x86_64-pc-windows-msvc/release/FontMuse.exe" ]; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ Windows portable –∞—Ä—Ö–∏–≤–∞..."
        cd src-tauri/target/x86_64-pc-windows-msvc/release/
        zip -r ../../../../releases/FontMuse-windows-portable.zip FontMuse.exe
        cd ../../../../
        log "Windows –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω ‚úì"
    fi
    
    # Linux AppImage
    if [ -f "src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/"*.AppImage ]; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ Linux portable –∞—Ä—Ö–∏–≤–∞..."
        find src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/appimage/ -name "*.AppImage" -exec cp {} releases/FontMuse-linux-portable.AppImage \;
        log "Linux –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω ‚úì"
    fi
    
    # macOS Intel
    if [ -d "src-tauri/target/x86_64-apple-darwin/release/bundle/macos/FontMuse.app" ]; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ macOS Intel –∞—Ä—Ö–∏–≤–∞..."
        cd src-tauri/target/x86_64-apple-darwin/release/bundle/macos/
        tar -czf ../../../../../releases/FontMuse-macos-intel-portable.tar.gz FontMuse.app
        cd ../../../../../
        log "macOS Intel –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω ‚úì"
    fi
    
    # macOS ARM
    if [ -d "src-tauri/target/aarch64-apple-darwin/release/bundle/macos/FontMuse.app" ]; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ macOS ARM –∞—Ä—Ö–∏–≤–∞..."
        cd src-tauri/target/aarch64-apple-darwin/release/bundle/macos/
        tar -czf ../../../../../releases/FontMuse-macos-arm-portable.tar.gz FontMuse.app
        cd ../../../../../
        log "macOS ARM –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω ‚úì"
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
show_results() {
    log "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–±–æ—Ä–∫–∏:"
    echo ""
    
    if [ -d "releases" ] && [ "$(ls -A releases/)" ]; then
        echo -e "${BLUE}–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã:${NC}"
        ls -la releases/
        echo ""
        
        total_size=$(du -sh releases/ | cut -f1)
        echo -e "${GREEN}–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: $total_size${NC}"
        echo ""
        
        echo -e "${YELLOW}–ì–æ—Ç–æ–≤–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ GitHub Releases!${NC}"
        echo "–§–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ: releases/"
    else
        error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞"
        exit 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
main() {
    check_dependencies
    clean_build
    install_deps
    build_frontend
    
    log "–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É portable –≤–µ—Ä—Å–∏–π..."
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –û–°
    OS="$(uname -s)"
    
    # –°–±–æ—Ä–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    case "$OS" in
        Darwin*)
            # macOS - –º–æ–∂–µ–º —Å–æ–±—Ä–∞—Ç—å macOS –∏ –≤–æ–∑–º–æ–∂–Ω–æ –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            log "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ macOS. –°–æ–±–∏—Ä–∞–µ–º –¥–ª—è macOS..."
            build_platform "macos-intel" "x86_64-apple-darwin" "macOS Intel"
            build_platform "macos-arm" "aarch64-apple-darwin" "macOS Apple Silicon"
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
            build_platform "windows" "x86_64-pc-windows-msvc" "Windows" || warn "Windows —Å–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)"
            build_platform "linux" "x86_64-unknown-linux-gnu" "Linux" || warn "Linux —Å–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)"
            ;;
        Linux*)
            # Linux - –º–æ–∂–µ–º —Å–æ–±—Ä–∞—Ç—å Linux –∏ –≤–æ–∑–º–æ–∂–Ω–æ Windows
            log "–û–±–Ω–∞—Ä—É–∂–µ–Ω Linux. –°–æ–±–∏—Ä–∞–µ–º –¥–ª—è Linux..."
            build_platform "linux" "x86_64-unknown-linux-gnu" "Linux"
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Å–±–æ—Ä–∫–∏ –¥–ª—è Windows (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å wine –∏–ª–∏ –º–∏–Ωimal–ì–í–∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–ì–í)
            build_platform "windows" "x86_64-pc-windows-msvc" "Windows" || warn "Windows —Å–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å (—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)"
            ;;
        CYGWIN*|MINGW*|MSYS*)
            # Windows - —Å–æ–±–∏—Ä–∞–µ–º –¥–ª—è Windows
            log "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Windows. –°–æ–±–∏—Ä–∞–µ–º –¥–ª—è Windows..."
            build_platform "windows" "x86_64-pc-windows-msvc" "Windows"
            ;;
        *)
            warn "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –û–°: $OS. –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã..."
            ;;
    esac
    
    create_archives
    show_results
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"